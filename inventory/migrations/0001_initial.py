# Generated by Django 5.1.7 on 2025-03-29 15:35

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('core', '0002_address'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Product/Service Name')),
                ('sku', models.CharField(blank=True, help_text='Unique code identifying the product.', max_length=100, null=True, unique=True, verbose_name='SKU (Stock Keeping Unit)')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('product_type', models.CharField(choices=[('INVENTORY', 'Inventory Item'), ('SERVICE', 'Service'), ('NON_INVENTORY', 'Non-Inventory Item')], default='INVENTORY', help_text='Determines how the item is tracked and accounted for.', max_length=20, verbose_name='Product Type')),
                ('track_inventory', models.BooleanField(default=True, help_text='Should stock levels be tracked for this item? Usually True for Inventory types.', verbose_name='Track Inventory Quantity')),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Default or standard cost per unit. Actual cost may vary (FIFO/LIFO/Avg).', max_digits=15, null=True, verbose_name='Default Unit Cost')),
                ('sales_price', models.DecimalField(blank=True, decimal_places=2, help_text='Default selling price per unit.', max_digits=15, null=True, verbose_name='Sales Price')),
                ('is_active', models.BooleanField(default=True, help_text='Inactive products cannot be bought or sold.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expense_cogs_account', models.ForeignKey(blank=True, help_text='Account to debit for Cost of Goods Sold (if Inventory) or Expense (if Non-Inventory/Service bought).', limit_choices_to={'account_type__in': ['EXPENSE']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expense_products', to='accounts.chartofaccounts', verbose_name='Default Expense/COGS Account')),
                ('income_account', models.ForeignKey(blank=True, help_text='Account to credit when this item is sold.', limit_choices_to={'account_type': 'REVENUE'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='income_products', to='accounts.chartofaccounts', verbose_name='Default Income Account')),
                ('tags', models.ManyToManyField(blank=True, related_name='products', to='core.tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Product / Service',
                'verbose_name_plural': 'Products & Services',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Warehouse Name')),
                ('is_active', models.BooleanField(default=True, help_text='Can inventory be stored/retrieved from this warehouse?', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.address', verbose_name='Warehouse Address')),
            ],
            options={
                'verbose_name': 'Warehouse',
                'verbose_name_plural': 'Warehouses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StockLevel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity_on_hand', models.DecimalField(decimal_places=4, default=Decimal('0.0'), max_digits=15, verbose_name='Quantity on Hand')),
                ('reorder_point', models.DecimalField(blank=True, decimal_places=4, help_text='Quantity at which reordering should be considered.', max_digits=15, null=True, verbose_name='Reorder Point')),
                ('last_stock_update', models.DateTimeField(auto_now=True, help_text='Timestamp of the last modification to this stock level record.', verbose_name='Last Stock Update')),
                ('product', models.ForeignKey(limit_choices_to={'track_inventory': True}, on_delete=django.db.models.deletion.CASCADE, related_name='stock_levels', to='inventory.product', verbose_name='Product')),
                ('warehouse', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='stock_levels', to='inventory.warehouse', verbose_name='Warehouse')),
            ],
            options={
                'verbose_name': 'Stock Level',
                'verbose_name_plural': 'Stock Levels',
                'ordering': ['warehouse', 'product'],
                'constraints': [models.UniqueConstraint(fields=('product', 'warehouse'), name='unique_product_warehouse_stock')],
            },
        ),
    ]
